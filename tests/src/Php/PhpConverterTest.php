<?php

namespace Test\GoetasWebservices\Xsd\XsdToPhp\Php;

use GoetasWebservices\Xsd\XsdToPhp\Php\PhpConverter;
use GoetasWebservices\Xsd\XsdToPhp\Naming\ShortNamingStrategy;
use GoetasWebservices\XML\XSDReader\SchemaReader;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2025-06-04 at 13:33:49.
 */
class PhpConverterTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var PhpConverter
     */
    protected $object;

    /**
     * @var SchemaReader
     */
    protected $reader;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new PhpConverter(new ShortNamingStrategy());
        $this->object->addNamespace('http://www.example.com', 'Example');
        $this->reader = new SchemaReader();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {

    }

    /**
     * @covers GoetasWebservices\Xsd\XsdToPhp\Php\PhpConverter::convert
     */
    public function testconvert() {
        $xsd = '<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.example.com"><xs:complexType name="TestType"/></xs:schema>';
        $schema = $this->reader->readString($xsd, 'schema.xsd');
        $result = $this->object->convert([$schema]);
        $this->assertIsArray($result);
        $this->assertArrayHasKey('Example\\TestType', $result);
    }

    /**
     * @covers GoetasWebservices\Xsd\XsdToPhp\Php\PhpConverter::visitElementDef
     */
    public function testvisitElementDef() {
        $xsd = '<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.example.com" targetNamespace="http://www.example.com">'
            .'<xs:complexType name="TestType"/>'
            .'<xs:element name="foo" type="tns:TestType"/>'
            .'</xs:schema>';
        $schema = $this->reader->readString($xsd, 'schema.xsd');
        $this->object->convert([$schema]);
        $elements = $schema->getElements();
        $element = reset($elements);
        $class = $this->object->visitElementDef($element);
        $this->assertInstanceOf('GoetasWebservices\\Xsd\\XsdToPhp\\Php\\Structure\\PHPClass', $class);
    }

    /**
     * @covers GoetasWebservices\Xsd\XsdToPhp\Php\PhpConverter::isSkip
     */
    public function testisSkip() {
        $xsd = '<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.example.com"><xs:complexType name="TestType"/></xs:schema>';
        $schema = $this->reader->readString($xsd, 'schema.xsd');
        $class = $this->object->convert([$schema]);
        $phpClass = reset($class);
        $result = $this->object->isSkip($phpClass);
        $this->assertIsBool($result);
    }

    /**
     * @covers GoetasWebservices\Xsd\XsdToPhp\Php\PhpConverter::visitType
     */
    public function testvisitType() {
        $xsd = '<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.example.com" targetNamespace="http://www.example.com">'
            .'<xs:complexType name="TestType"/>'
            .'<xs:element name="foo" type="tns:TestType"/>'
            .'</xs:schema>';
        $schema = $this->reader->readString($xsd, 'schema.xsd');
        $this->object->convert([$schema]);
        $types = $schema->getTypes();
        $type = reset($types);
        $class = $this->object->visitType($type);
        $this->assertInstanceOf('GoetasWebservices\\Xsd\\XsdToPhp\\Php\\Structure\\PHPClass', $class);
    }
}
